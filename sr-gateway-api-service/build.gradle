mainClassName = 'com.mg.smartrent.gatewayapi.GatewayApiApplication'

jar {
    manifest {
        attributes manifestAttributes(mainClassName)
    }
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'

    implementation "com.google.guava:guava:${project['google-guava.version']}"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

test {
    maxHeapSize = '1G'
}


def dockerImageName = "${project.property("dockerRepoName")}/$project.name:$project.version"
def dockerExposedPorts = "8081:8081"

/**
 * Enhances the build stage with generation of a new post build directory that will hold unzipped distribution.
 * Needed for docker image generation
 */
build {
    doLast {//create dist
        def targetDistDir = new File("$buildDir/distributions-docker")
        def windArchive = new File("$buildDir/distributions").listFiles().find { it.name.endsWith(".zip") }
        copy {
            from zipTree(windArchive)
            into targetDistDir
        }
        def unzippedDir = targetDistDir.listFiles()[0]
        unzippedDir.renameTo(new File(targetDistDir, 'app'))
    }

    doLast {//build docker image
        buildDockerImage(dockerImageName)
    }
}

task runDockerizedService(group: 'application') {
    doLast {
        println "STARTING DOCKER CONTAINER FOR: $dockerImageName"
        println "docker rmi -f $dockerImageName".execute().text.trim()

        println "docker run -d -p $dockerExposedPorts maimas/$dockerImageName"
        println "docker run -d -p $dockerExposedPorts maimas/$dockerImageName".execute().text.trim()
    }
}
