apply plugin: 'application'

mainClassName = 'com.mg.smartrent.gatewayapi.GatewayApiApplication'

jar {
    manifest {
        attributes manifestAttributes('Smartrent Gateway API', mainClassName)
    }
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}


tasks.withType(CreateStartScripts).each { task ->
    task.doLast {
        task.windowsScript.write task.windowsScript.text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
        task.unixScript.write task.unixScript.text.replaceFirst(/(CLASSPATH=.APP_HOME\/lib\/).*/, { "CLASSPATH=\$(echo \$APP_HOME/lib/*.jar | tr ' ' ':')" })
    }
}

test {
    maxHeapSize = '1G'
}

/**
 * Enhances the build stage with generation of a new post build directory that will hold unzipped distribution.
 * Needed for docker image generation
 */
build {
    doLast {
        def targetDistDir = new File("$buildDir/distributions-docker")
        def windArchive = new File("$buildDir/distributions").listFiles().find { it.name.endsWith(".zip") }
        copy {
            from zipTree(windArchive)
            into targetDistDir
        }
        def unzippedDir = targetDistDir.listFiles()[0]
        unzippedDir.renameTo(new File(targetDistDir, 'app'))
    }
}